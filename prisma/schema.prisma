// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// encrypt user's personal data: email, phone, name, password
model User {
  id        String   @id @unique @default(uuid())
  name      String
  email     String
  phone     String?
  subs      Sub[]
  username  String   @unique
  password  String
  googleSub String?
  active    Boolean  @default(true)
  admin     Boolean  @default(false)
  client    Client[]
}

model Error {
  id      String  @id @unique @default(uuid())
  name    String
  message String
  status  Int?
  userId  String?
}

model Model {
  id        String     @id @unique @default(uuid())
  name      String
  path      String
  type      String
  subtype   String
  pieces    Piece[]
  favorites Favorite[]
}

model Piece {
  id            String          @id @unique @default(uuid())
  name          String
  model         Model           @relation(fields: [modelId], references: [id])
  modelId       String
  PieceFavorite PieceFavorite[]
}

model Pattern {
  id              String            @id @unique @default(uuid())
  name            String            @unique
  url             String
  PatternFavorite PatternFavorite[]
}

model Color {
  id              String            @id @unique @default(uuid())
  name            String
  code            String            @unique
  rgb             String
  hex             String
  PieceFavorite   PieceFavorite[]
  PatternFavorite PatternFavorite[]
}

model Sub {
  id        String    @id @unique @default(uuid())
  startDate DateTime?
  endDate   DateTime?
  status    String
  type      String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

// encrypt sensitive info, name, email, phone, pass
model Client {
  id        String     @id @unique @default(uuid())
  name      String
  email     String
  phone     String
  status    String     @default("active")
  favorites Favorite[]
  userId    String
  User      User       @relation(fields: [userId], references: [id])
}

model Favorite {
  id              String            @id @unique @default(uuid())
  client          Client            @relation(fields: [clientId], references: [id], onDelete: Cascade)
  Model           Model             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  clientId        String
  modelId         String
  patternId       String?
  PieceFavorite   PieceFavorite[]
  PatternFavorite PatternFavorite[]
}

model PieceFavorite {
  id         String   @id @unique @default(uuid())
  piece      Piece    @relation(fields: [pieceId], references: [id], onDelete: Cascade)
  color      Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
  pieceId    String
  colorId    String
  favoriteId String
}

model PatternFavorite {
  id         String   @id @unique @default(uuid())
  pattern    Pattern  @relation(fields: [patternId], references: [id], onDelete: Cascade)
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade)
  color      Color    @relation(fields: [colorId], references: [id], onDelete: Cascade)
  patternId  String
  favoriteId String
  colorId    String
}
