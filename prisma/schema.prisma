// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// encrypt user's personal data: email, phone, name, password
model User {
  id         String   @id @unique @default(uuid())
  name       String
  email      String
  phone      String?
  subs       Sub[]
  username   String   @unique
  password   String
  googleSub  String?
  active     Boolean  @default(true)
  admin      Boolean  @default(false)
  clientList Client[]
}

model Error {
  id      String  @id @unique @default(uuid())
  name    String
  message String
  status  Int?
  userId  String?
}

model Item {
  id      String   @id @unique @default(uuid())
  name    String
  path    String
  type    String
  subtype String
  options Option[]
}

model Pattern {
  id      String   @id @unique @default(uuid())
  name    String   @unique
  url     String
  options Option[]
}

model Color {
  id        String   @id @unique @default(uuid())
  name      String   @unique
  code      String
  rgb       String
  hex       String
  iColorIds Option[] @relation("iColor")
  pColorIds Option[] @relation("pColor")
}

model Sub {
  id        String    @id @unique @default(uuid())
  startDate DateTime?
  endDate   DateTime?
  status    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

// encrypt sensitive info, name, email, phone, pass
model Client {
  id      String   @id @unique @default(uuid())
  name    String
  email   String
  phone   String
  status  String   @default("active")
  options Option[]
  userId  String
  User    User     @relation(fields: [userId], references: [id])
}

model Option {
  id       String   @id @unique @default(uuid())
  client   Client   @relation(fields: [clientId], references: [id])
  item     Item     @relation(fields: [iId], references: [id])
  pattern  Pattern? @relation(fields: [pId], references: [id])
  iColor   Color    @relation("iColor", fields: [iColorId], references: [id])
  pColor   Color?   @relation("pColor", fields: [pColorId], references: [id])
  clientId String
  iId      String
  pId      String?
  iColorId String
  pColorId String?
}
